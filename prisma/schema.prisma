generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model PendingRegistrations {
  id                Int      @id @default(autoincrement())
  email             String   @unique @db.VarChar(255)
  password          String   @db.VarChar(255)
  planId            Int
  role              String   @db.VarChar(50)
  terms             Boolean
  confirmationToken String   @db.VarChar(255)
  tokenExpiresAt    DateTime @db.DateTime(0)
  createdAt         DateTime @default(now()) @db.DateTime(0)

  @@index([confirmationToken], name: "confirmationToken_index")
}

model features {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(255)
  createAt DateTime? @default(now()) @db.DateTime(0)
  planId   Int
  plans    plans     @relation(fields: [planId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "features_ibfk_1")

  @@index([planId], map: "planId")
}

model plans {
  id              Int           @id @default(autoincrement())
  title           String        @db.VarChar(255)
  description     String        @db.Text
  price           Float         @db.Float
  period          BillingPeriod
  trialPeriodDays Int?          @default(0)
  isFree          Boolean       @default(false)
  maxPets         Int           @default(1)
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now()) @db.DateTime(0)
  role            PlanRole
  features        features[]
  users           users[]
}

model users {
  id                Int       @id @default(autoincrement())
  email             String    @unique(map: "email") @db.VarChar(255)
  password          String    @db.VarChar(255)
  planId            Int
  terms             Boolean   @default(false)
  isProfileComplete Boolean?  @default(false)
  createdAt         DateTime  @default(now()) @db.DateTime(0)
  isTrial           Boolean?  @default(true)
  trialStartedAt    DateTime? @default(now()) @db.DateTime(0)
  trialEndsAt       DateTime? @db.DateTime(0)
  planStartedAt     DateTime? @db.DateTime(0)
  planExpiresAt     DateTime? @default(now()) @db.DateTime(0)

  // Nuevos campos para verificaci√≥n de email
  emailConfirmed Boolean @default(false)

  owners owners?
  vets   vets?
  plans  plans   @relation(fields: [planId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_ibfk_1")

  @@index([planId], map: "planId")
}

model owners {
  id             Int      @id @default(autoincrement())
  name           String   @db.VarChar(255)
  lastName       String   @db.VarChar(255)
  phone          String   @db.VarChar(50)
  secondaryPhone String?  @db.VarChar(50)
  city           String   @db.VarChar(255)
  neighborhood   String   @db.VarChar(255)
  address        String   @db.VarChar(255)
  createdAt      DateTime @default(now()) @db.DateTime(0)
  updatedAt      DateTime @db.DateTime(0)
  userId         Int      @unique(map: "userId")
  users          users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "owners_ibfk_1")
  pets           pets[]
}

model vets {
  id               Int         @id @default(autoincrement())
  profilePicture   String?     @db.VarChar(255)
  description      String?     @db.Text
  consultationFee  Decimal?    @db.Decimal(10, 2)
  emergencyService Boolean     @default(false)
  homeVisit        Boolean     @default(false)
  licenseNumber    String      @unique @db.VarChar(50)
  name             String      @db.VarChar(100)
  lastName         String      @db.VarChar(100)
  phone            String      @db.VarChar(20)
  specialty        String      @db.VarChar(100)
  clinicName       String      @db.VarChar(255)
  clinicAddress    String      @db.VarChar(255)
  city             String      @db.VarChar(100)
  isActive         Boolean     @default(true)
  latitude         Decimal?    @db.Decimal(9, 6)
  longitude        Decimal?    @db.Decimal(9, 6)
  rating           Float?
  reviewCount      Int         @default(0)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  documents        documents[]
  attentions       pet_vets[]
  review           review[]
  schedule         schedule[]
  vaccines         vaccines[]
  userId           Int         @unique(map: "userId")
  users            users       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vets_ibfk_1")

  @@index([licenseNumber], map: "idx_license")
  @@index([city], map: "idx_city")
}

model pets {
  id              Int           @id @default(autoincrement())
  name            String        @db.VarChar(255)
  species         String        @db.VarChar(100)
  breed           String        @db.VarChar(100)
  sex             String        @db.VarChar(20)
  birthDate       DateTime      @db.DateTime(0)
  color           String        @db.VarChar(100)
  photo           String?       @db.Text
  microchipNumber String?       @db.VarChar(100)
  tattooCode      String?       @db.VarChar(100)
  passportNumber  String?       @db.VarChar(100)
  codeVetlink     String        @unique @default("VL-0000000-0") @db.VarChar(15) // Longitud exacta para "VL-0000000-0"
  sterilized      Boolean       @default(false)
  allergies       String?       @db.Text
  chronicDiseases String?       @db.Text
  disabilities    String?       @db.Text
  bloodType       String?       @db.VarChar(20)
  favoriteFood    String        @db.VarChar(100)
  behaviorNotes   String?       @db.Text
  feedingSchedule String?       @db.Text
  diet            String?       @db.VarChar(100)
  activityLevel   String        @db.VarChar(50)
  aggressive      String        @db.VarChar(20)
  ownerId         Int
  createdAt       DateTime      @default(now()) @db.DateTime(0)
  updatedAt       DateTime      @db.DateTime(0)
  dewormings      dewormings[]
  documents       documents[]
  medications     medications[]
  attentions      pet_vets[]
  owner           owners        @relation(fields: [ownerId], references: [id])
  vaccines        vaccines[]

  @@index([ownerId], map: "ownerId")
}

model dewormings {
  id       Int       @id @default(autoincrement())
  petId    Int
  product  String    @db.VarChar(255)
  date     DateTime  @db.DateTime(0)
  nextDate DateTime? @db.DateTime(0)
  notes    String?   @db.Text
  pet      pets      @relation(fields: [petId], references: [id])

  @@index([petId], map: "petId")
}

model medications {
  id           Int       @id @default(autoincrement())
  petId        Int
  name         String    @db.VarChar(255)
  dosage       String    @db.VarChar(100)
  frequency    String    @db.VarChar(100)
  startDate    DateTime  @db.DateTime(0)
  endDate      DateTime? @db.DateTime(0)
  prescribedBy String?   @db.VarChar(255)
  notes        String?   @db.Text
  pet          pets      @relation(fields: [petId], references: [id])

  @@index([petId], map: "petId")
}

model pet_vets {
  id       Int      @id @default(autoincrement())
  petId    Int
  vetId    Int
  clinicId Int?
  date     DateTime @default(now())
  reason   String   @db.VarChar(255)
  notes    String?  @db.Text
  clinic   clinics? @relation(fields: [clinicId], references: [id])
  pet      pets     @relation(fields: [petId], references: [id])
  vet      vets     @relation(fields: [vetId], references: [id])

  @@unique([petId, vetId, date], name: "unique_attention")
  @@index([petId, vetId], map: "idx_pet_vet")
  @@index([clinicId], map: "pet_vets_clinicId_fkey")
  @@index([vetId], map: "pet_vets_vetId_fkey")
}

model clinics {
  id         Int        @id @default(autoincrement())
  name       String     @db.VarChar(255)
  address    String     @db.VarChar(255)
  phone      String     @db.VarChar(20)
  attentions pet_vets[]
}

model vaccines {
  id              Int         @id @default(autoincrement())
  petId           Int
  vetId           Int?
  type            String      @db.VarChar(100)
  category        VaccineType @default(LEGAL)
  batchNumber     String      @db.VarChar(50)
  laboratory      String      @db.VarChar(100)
  applicationDate DateTime    @db.DateTime(0)
  nextDate        DateTime?   @db.DateTime(0)
  documentId      Int?
  document        documents?  @relation(fields: [documentId], references: [id])
  pet             pets        @relation(fields: [petId], references: [id])
  vet             vets?       @relation(fields: [vetId], references: [id])

  @@index([petId], map: "idx_pet")
  @@index([batchNumber], map: "idx_batch")
  @@index([applicationDate], map: "idx_date")
  @@index([documentId], map: "vaccines_documentId_fkey")
  @@index([vetId], map: "vaccines_vetId_fkey")
}

model documents {
  id             Int          @id @default(autoincrement())
  petId          Int
  vetId          Int?
  type           DocumentType
  title          String       @db.VarChar(255)
  fileUrl        String       @db.Text
  issueDate      DateTime     @default(now())
  expirationDate DateTime?    @db.DateTime(0)
  pet            pets         @relation(fields: [petId], references: [id])
  vet            vets?        @relation(fields: [vetId], references: [id])
  vaccine        vaccines[]

  @@index([petId], map: "idx_doc_pet")
  @@index([type], map: "idx_doc_type")
  @@index([vetId], map: "documents_vetId_fkey")
}

model review {
  id           Int      @id @default(autoincrement())
  rating       Int      @db.TinyInt
  comment      String?  @db.Text
  reviewerName String   @db.VarChar(100)
  createdAt    DateTime @default(now())
  vetId        Int?
  vets         vets?    @relation(fields: [vetId], references: [id], map: "Review_vetId_fkey")

  @@index([vetId], map: "Review_vetId_fkey")
}

model schedule {
  id          Int      @id @default(autoincrement())
  dayOfWeek   Int
  startTime   DateTime @db.Time(0)
  endTime     DateTime @db.Time(0)
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  vetId       Int?
  vets        vets?    @relation(fields: [vetId], references: [id], map: "Schedule_vetId_fkey")

  @@index([vetId], map: "Schedule_vetId_fkey")
}

enum PlanRole {
  clinic
  owner
  store
  veterinarian
  walker
}

enum BillingPeriod {
  MONTHLY
  YEARLY
  INDEFINITE
}

enum VaccineType {
  LEGAL
  RECOMMENDED
}

enum DocumentType {
  VACCINE_CERTIFICATE
  OWNERSHIP_PROOF
  DIAGNOSTIC_IMAGE
  PRESCRIPTION
}
